# coding: utf-8
from sqlalchemy import DECIMAL, DateTime  # API Logic Server GenAI assist
from sqlalchemy import Column, DECIMAL, Double, ForeignKey, Integer, LargeBinary, String, Table, Text, text, select, func
import sqlalchemy
from sqlalchemy.orm import relationship, column_property, foreign
from sqlalchemy.ext.declarative import declarative_base

########################################################################################################################
# Classes describing database for SqlAlchemy ORM, initially created by schema introspection.
#
# Alter this file per your database maintenance policy
#    See https://apilogicserver.github.io/Docs/Project-Rebuild/#rebuilding
#
# Created:  August 16, 2025 08:43:38
# Database: sqlite:////Users/val/dev/ApiLogicServer/ApiLogicServer-dev/build_and_test/ApiLogicServer/logic_bank/database/db.sqlite
# Dialect:  sqlite
#
# mypy: ignore-errors
# 
# Generated by API Logic Server GenAI assist, then manually altered...
# look for manual for virtual derivations, fks etc
########################################################################################################################
 
'''
from database.system.SAFRSBaseX import SAFRSBaseX, TestBase
from flask_login import UserMixin
import safrs, flask_sqlalchemy, os
from safrs import jsonapi_attr
from flask_sqlalchemy import SQLAlchemy
'''
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.sql.sqltypes import NullType
from typing import List

Base = declarative_base()  # type: flask_sqlalchemy.model.DefaultMeta
metadata = Base.metadata

'''
#NullType = db.String  # datatype fixup
#TIMESTAMP= db.TIMESTAMP

from sqlalchemy.dialects.sqlite import *

if os.getenv('APILOGICPROJECT_NO_FLASK') is None or os.getenv('APILOGICPROJECT_NO_FLASK') == 'None':
    Base = SAFRSBaseX   # enables rules to be used outside of Flask, e.g., test data loading
else:
    Base = TestBase     # ensure proper types, so rules work for data loading
    print('*** Models.py Using TestBase ***')
'''


class Category(Base):  # type: ignore
    __tablename__ = 'Category'
    _s_collection_name = 'Category'  # type: ignore

    Id = Column(Integer, primary_key=True)
    CategoryName = Column(String(8000))
    Description = Column(String(8000))

    # parent relationships (access parent)

    # child relationships (access children)



class Customer(Base):  # type: ignore
    __tablename__ = 'Customer'
    _s_collection_name = 'Customer'  # type: ignore

    Id = Column(String(8000), primary_key=True)
    CompanyName = Column(String(8000))
    ContactName = Column(String(8000))
    ContactTitle = Column(String(8000))
    Address = Column(String(8000))
    City = Column(String(8000))
    Region = Column(String(8000))
    PostalCode = Column(String(8000))
    Country = Column(String(8000))
    Phone = Column(String(8000))
    Fax = Column(String(8000))
    Balance : DECIMAL = Column(DECIMAL)
    CreditLimit : DECIMAL = Column(DECIMAL)
    OrderCount = Column(Integer, server_default=text("0"))
    UnpaidOrderCount = Column(Integer, server_default=text("0"))
    allow_client_generated_ids = True

    # parent relationships (access parent)

    # child relationships (access children)
    CustomerCustomerDemoList : Mapped[List["CustomerCustomerDemo"]] = relationship(back_populates="CustomerType")
    # OrderZList : Mapped[List["OrderZ"]] = relationship(back_populates="Customer")
    OrderList : Mapped[List["Order"]] = relationship(back_populates="Customer", cascade="all, delete")



class CustomerDemographic(Base):  # type: ignore
    __tablename__ = 'CustomerDemographic'
    _s_collection_name = 'CustomerDemographic'  # type: ignore

    Id = Column(String(8000), primary_key=True)
    CustomerDesc = Column(String(8000))
    allow_client_generated_ids = True

    # parent relationships (access parent)

    # child relationships (access children)



class Department(Base):  # type: ignore
    __tablename__ = 'Department'
    _s_collection_name = 'Department'  # type: ignore

    Id = Column(Integer, primary_key=True)
    Name = Column(Text)
    SalaryTotal : DECIMAL = Column(DECIMAL)
    WorksForCount = Column(Integer)
    OnLoanCount = Column(Integer)

    # parent relationships (access parent)

    # child relationships (access children)
    EmployeeOnLoanList : Mapped[List["Employee"]] = relationship(foreign_keys='[Employee.OnLoan]', back_populates="On_loan_dept")
    EmployeeWorksForList : Mapped[List["Employee"]] = relationship(foreign_keys='[Employee.WorksFor]', back_populates="Works_for_dept")



class EmployeeAudit(Base):  # type: ignore
    __tablename__ = 'EmployeeAudit'
    _s_collection_name = 'EmployeeAudit'  # type: ignore

    Id = Column(Integer, primary_key=True)
    Title = Column(String)
    Salary : DECIMAL = Column(DECIMAL)
    LastName = Column(String)
    FirstName = Column(String)
    EmployeeId = Column(Integer)
    CreatedOn = Column(Text)

    # parent relationships (access parent)

    # child relationships (access children)

    # test manual virtual relationship (no FK in db)
    Employee = relationship('Employee', 
                          remote_side='Employee.Id',
                          primaryjoin='foreign(EmployeeAudit.EmployeeId) == Employee.Id',
                          back_populates='EmployeeAuditList')  # parent emp, via EmployeeId (test: missing FK)


class Product(Base):  # type: ignore
    __tablename__ = 'Product'
    _s_collection_name = 'Product'  # type: ignore

    Id = Column(Integer, primary_key=True)
    ProductName = Column(String(8000))
    SupplierId = Column(Integer, nullable=False)
    CategoryId = Column(Integer, nullable=False)
    QuantityPerUnit = Column(String(8000))
    UnitPrice : DECIMAL = Column(DECIMAL, nullable=False)
    UnitsInStock = Column(Integer, nullable=False)
    UnitsOnOrder = Column(Integer, nullable=False)
    ReorderLevel = Column(Integer, nullable=False)
    Discontinued = Column(Integer, nullable=False)
    UnitsShipped = Column(Integer)

    # parent relationships (access parent)

    # child relationships (access children)
    OrderList : Mapped[List["OrderDetail"]] = relationship(back_populates="ProductOrdered")



t_ProductDetails_V = Table(
    'ProductDetails_V', metadata,
    Column('Id', Integer),
    Column('ProductName', String(8000)),
    Column('SupplierId', Integer),
    Column('CategoryId', Integer),
    Column('QuantityPerUnit', String(8000)),
    Column('UnitPrice', DECIMAL),
    Column('UnitsInStock', Integer),
    Column('UnitsOnOrder', Integer),
    Column('ReorderLevel', Integer),
    Column('Discontinued', Integer),
    Column('UnitsShipped', Integer),
    Column('CategoryName', String(8000)),
    Column('CategoryDescription', String(8000)),
    Column('SupplierName', String(8000)),
    Column('SupplierRegion', String(8000))
)


class Region(Base):  # type: ignore
    __tablename__ = 'Region'
    _s_collection_name = 'Region'  # type: ignore

    Id = Column(Integer, primary_key=True)
    RegionDescription = Column(String(8000))

    # parent relationships (access parent)

    # child relationships (access children)



class Shipper(Base):  # type: ignore
    __tablename__ = 'Shipper'
    _s_collection_name = 'Shipper'  # type: ignore

    Id = Column(Integer, primary_key=True)
    CompanyName = Column(String(8000))
    Phone = Column(String(8000))

    # parent relationships (access parent)

    # child relationships (access children)



class Supplier(Base):  # type: ignore
    __tablename__ = 'Supplier'
    _s_collection_name = 'Supplier'  # type: ignore

    Id = Column(Integer, primary_key=True)
    CompanyName = Column(String(8000))
    ContactName = Column(String(8000))
    ContactTitle = Column(String(8000))
    Address = Column(String(8000))
    City = Column(String(8000))
    Region = Column(String(8000))
    PostalCode = Column(String(8000))
    Country = Column(String(8000))
    Phone = Column(String(8000))
    Fax = Column(String(8000))
    HomePage = Column(String(8000))

    # parent relationships (access parent)

    # child relationships (access children)



class Territory(Base):  # type: ignore
    __tablename__ = 'Territory'
    _s_collection_name = 'Territory'  # type: ignore

    Id = Column(String(8000), primary_key=True)
    TerritoryDescription = Column(String(8000))
    RegionId = Column(Integer, nullable=False)
    allow_client_generated_ids = True

    # parent relationships (access parent)

    # child relationships (access children)
    EmployeeTerritoryList : Mapped[List["EmployeeTerritory"]] = relationship(back_populates="Territory")



class CustomerCustomerDemo(Base):  # type: ignore
    __tablename__ = 'CustomerCustomerDemo'
    _s_collection_name = 'CustomerCustomerDemo'  # type: ignore

    Id = Column(String(8000), primary_key=True)
    CustomerTypeId = Column(ForeignKey('Customer.Id'))
    allow_client_generated_ids = True

    # parent relationships (access parent)
    CustomerType : Mapped["Customer"] = relationship(back_populates=("CustomerCustomerDemoList"))

    # child relationships (access children)



class Employee(Base):  # type: ignore
    __tablename__ = 'Employee'
    _s_collection_name = 'Employee'  # type: ignore

    Id = Column(Integer, primary_key=True)
    LastName = Column(String(8000))
    FirstName = Column(String(8000))
    Title = Column(String(8000))
    TitleOfCourtesy = Column(String(8000))
    BirthDate = Column(String(8000))
    HireDate = Column(String(8000))
    Address = Column(String(8000))
    City = Column(String(8000))
    Region = Column(String(8000))
    PostalCode = Column(String(8000))
    Country = Column(String(8000))
    HomePhone = Column(String(8000))
    Extension = Column(String(8000))
    Photo = Column(LargeBinary)
    Notes = Column(String(8000))
    ReportsTo = Column(Integer)
    PhotoPath = Column(String(8000))
    IsCommissioned = Column(Integer)
    Salary : DECIMAL = Column(DECIMAL)
    WorksFor = Column(ForeignKey('Department.Id'))
    OnLoan = Column(ForeignKey('Department.Id'))

    # parent relationships (access parent) - manual accessor 
    On_loan_dept : Mapped["Department"] = relationship(foreign_keys='[Employee.OnLoan]', back_populates=("EmployeeOnLoanList"))
    Works_for_dept : Mapped["Department"] = relationship(foreign_keys='[Employee.WorksFor]', back_populates=("EmployeeWorksForList"))

    # test manual virtual relationship (no FK in db)
    Manager = relationship('Employee', 
                          remote_side='Employee.Id',
                          primaryjoin='foreign(Employee.ReportsTo) == Employee.Id',
                          back_populates='Manages')  # parent emp, via ReportsTo (test: missing FK)

    # child relationships (access children)
    Manages : Mapped[List["Employee"]] = relationship('Employee',
                                                     primaryjoin='Employee.Id == foreign(Employee.ReportsTo)',
                                                     back_populates='Manager')  # employees this person manages
    EmployeeTerritoryList : Mapped[List["EmployeeTerritory"]] = relationship(back_populates="Employee")
    OrderList : Mapped[List["Order"]] = relationship(back_populates="SalesRep")

    EmployeeAuditList : Mapped[List["EmployeeAudit"]] = relationship('EmployeeAudit',
                                                     primaryjoin='Employee.Id == foreign(EmployeeAudit.EmployeeId)',
                                                     back_populates='Employee')  # audit records for this employee


class OrderClass(Base):  # type: ignore
    __tablename__ = 'OrderZ' # used to verify name mapping
    _s_collection_name = 'OrderZ'  # type: ignore

    Id = Column(Integer, primary_key=True)
    CustomerId = Column(ForeignKey('Customer.Id'))
    EmployeeId = Column(Integer, nullable=False)
    OrderDate = Column(String(8000))
    RequiredDate = Column(String(8000))
    ShippedDate = Column(String(8000))
    ShipVia = Column(Integer)
    Freight : DECIMAL = Column(DECIMAL, nullable=False)
    ShipName = Column(String(8000))
    ShipAddress = Column(String(8000))
    ShipCity = Column(String(8000))
    ShipRegion = Column(String(8000))
    ShipPostalCode = Column(String(8000))
    ShipCountry = Column(String(8000))
    AmountTotal : DECIMAL = Column(DECIMAL)

    # parent relationships (access parent)
    # Customer : Mapped["Customer"] = relationship(back_populates=("OrderZList"))
    SalesRep : Mapped["Employee"] = relationship('Employee', 
                                                foreign_keys='[OrderClass.EmployeeId]',
                                                primaryjoin='OrderClass.EmployeeId == Employee.Id')

    # child relationships (access children)


class EmployeeTerritory(Base):  # type: ignore
    __tablename__ = 'EmployeeTerritory'
    _s_collection_name = 'EmployeeTerritory'  # type: ignore

    Id = Column(String(8000), primary_key=True)
    EmployeeId = Column(ForeignKey('Employee.Id'), nullable=False)
    TerritoryId = Column(ForeignKey('Territory.Id'))
    allow_client_generated_ids = True

    # parent relationships (access parent)
    Employee : Mapped["Employee"] = relationship(back_populates=("EmployeeTerritoryList"))
    Territory : Mapped["Territory"] = relationship(back_populates=("EmployeeTerritoryList"))

    # child relationships (access children)



class Order(Base):  # type: ignore
    __tablename__ = 'Order'
    _s_collection_name = 'Order'  # type: ignore

    Id = Column(Integer, primary_key=True)
    CustomerId = Column(ForeignKey('Customer.Id'))
    EmployeeId = Column(ForeignKey('Employee.Id'), nullable=False)
    OrderDate = Column(String(8000))
    RequiredDate = Column(String(8000))
    ShippedDate = Column(String(8000))
    ShipVia = Column(Integer)
    Freight : DECIMAL = Column(DECIMAL, nullable=False)
    ShipName = Column(String(8000))
    ShipAddress = Column(String(8000))
    ShipCity = Column(String(8000))
    ShipRegion = Column(String(8000))
    ShipPostalCode = Column(String(8000))
    ShipCountry = Column(String(8000))
    AmountTotal : DECIMAL = Column(DECIMAL(10, 2))

    # parent relationships (access parent)
    Customer : Mapped["Customer"] = relationship(back_populates=("OrderList"))
    SalesRep : Mapped["Employee"] = relationship(back_populates=("OrderList"))  # manual override on accessor

    # child relationships (access children)
    OrderDetailList : Mapped[List["OrderDetail"]] = relationship(back_populates="OrderHeader", cascade="all, delete")


#  https://docs.sqlalchemy.org/en/13/orm/mapped_sql_expr.html

"""
Customer.total_ordered_sql = column_property(
    select([sqlalchemy.sql.functions.sum(Order.AmountTotal)]).where(Order.CustomerId == Customer.Id))
"""
Customer.total_ordered_sql = column_property(
    select(sqlalchemy.sql.functions.sum(Order.AmountTotal)).where(Order.CustomerId == Customer.Id))

Employee.order_count_sql = column_property(   # used in rules, special provisions required
    select(sqlalchemy.sql.functions.count(Order.Id)).where(Order.Id == Order.EmployeeId)
    , default=0)


class OrderDetail(Base):  # type: ignore
    __tablename__ = 'OrderDetail'
    _s_collection_name = 'OrderDetail'  # type: ignore

    Id = Column(Integer, primary_key=True)
    OrderId = Column(ForeignKey('Order.Id'), nullable=False)
    ProductId = Column(ForeignKey('Product.Id'), nullable=False)
    UnitPrice : DECIMAL = Column(DECIMAL, nullable=False)
    Quantity = Column(Integer, nullable=False)
    Discount = Column(Double, nullable=False)
    Amount : DECIMAL = Column(DECIMAL)
    ShippedDate = Column(String(8000))

    # parent relationships (access parent)
    OrderHeader : Mapped["Order"] = relationship(back_populates=("OrderDetailList"))  # manual override on accessor
    ProductOrdered : Mapped["Product"] = relationship(back_populates=("OrderList"))

    # child relationships (access children)
